import java.util.*;
class Node {
    int data;
    Node next;

    Node(int d) {
        data = d;
        next = null;
    }
}

class Main{
    static void printList(Node n){
        while(n!=null){
            System.out.print(n.data+" ");
            n = n.next;
        }
        System.out.println();
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int val = sc.nextInt();
        Node first = new Node(val);
        Node tail = first;
        for(int i=0; i<n-1; i++)
        {
            val = sc.nextInt();
            tail.next = new Node(val);
            tail = tail.next;
        }
        int m = sc.nextInt();
        val = sc.nextInt();
        Node second = new Node(val);
        tail = second;
        for(int i=0; i<m-1; i++)
        {
            val = sc.nextInt();
            tail.next = new Node(val);
            tail = tail.next;
        }
        
        Solution g = new Solution();
        Node res = g.subtract(first, second);
        printList(res);
    }
}

class Solution {   
    static Node subtract(Node l1, Node l2) {
        // Determine which list is larger
        boolean isL1Bigger = isBigger(l1, l2);
        
        // Reverse both lists
        l1 = reverse(l1);
        l2 = reverse(l2);
        
        Node dummy = new Node(0);
        Node t = dummy;
        int borrow = 0;

        while (l1 != null || l2 != null) {
            int ans = borrow;
            if (l1 != null) {
                ans += l1.data;
                l1 = l1.next;
            }
            if (l2 != null) {
                ans -= l2.data;
                l2 = l2.next;
            }

            if (ans < 0) {
                borrow = 1;
                ans += 10;
            } else {
                borrow = 0;
            }
            t.next = new Node(ans);
            t = t.next;
            l1=l1.next;
            if(l2!=null){
                l2=l2.next;
            }
        }

        // Reverse the result and skip leading zeros
        Node result = reverse(dummy.next);
        while (result != null && result.data == 0) {
            result = result.next;
        }

        // If result is null, it means the result is 0
        if (result == null) {
            return new Node(0);
        }

        return result;
    }

    static int size(Node l) {
        Node temp = l;
        int n = 0;
        while (temp != null) {
            n++;
            temp = temp.next;
        }
        return n;
    }

    static boolean isBigger(Node l1, Node l2) {
        if (size(l1) > size(l2)) {
            return true;
        } else if (size(l1) < size(l2)) {
            return false;
        } else {
            Node t1 = l1;
            Node t2 = l2;
            while (t1 != null && t2 != null) {
                if (t1.data > t2.data) {
                    return true;
                } else if (t1.data < t2.data) {
                    return false;
                }
                t1 = t1.next;
                t2 = t2.next;
            }
        }
        return false; // They are equal
    }

    static Node reverse(Node head) {
        Node curr = head;
        Node prev = null;
        while (curr != null) {
            Node forward = curr.next;
            curr.next = prev;
            prev = curr;
            curr = forward;
        }
        return prev;
    }
}
